{
	"$schema": "https://raw.githubusercontent.com/martinring/tmlanguage/master/tmlanguage.json",
	"name": "hare",
	"patterns": [
		{
			"comment": "Import Statement",
			"match": "^(use)[\\s\\w:={},*]+;$",
			"captures": [{"name": "strong"}, {"name": "keyword.hare"}]
		},
		{
			"name": "keyword.hare",
			"match": "\\b(abort|alloc|append|as|assert|break|case|const|continue|def|defer|delete|else|enum|export|false|fn|for|free|if|insert|is|len|let|match|offset|return|size|static|struct|switch|true|type|union|use|void|yield|_)\\b"
		},
		{
			"name": "entity.name.tag.hare",
			"match": "@\\w+"
		},
		{
			"name": "comment.line.hare",
			"match": "//.*"
		},
		{
			"name": "string.quoted.double.hare",
			"begin": "\"",
			"end": "\"",
			"patterns": [
				{
					"name": "constant.character.escape.hare",
					"match": "\\\\([0abfnrtv\\\\'\"]|x[0-9a-fA-F]{2}|u[0-9a-fA-F]{4}|U[0-9a-fA-F]{8})"
				}
			]
		},
		{
			"name": "string.unquoted.hare",
			"begin": "`",
			"end": "`"
		},
		{
			"name": "constant.character.hare",
			"begin": "'",
			"end": "'",
			"patterns": [
				{
					"name": "constant.character.escape.hare",
					"match": "\\\\([0abfnrtv\\\\'\"]|x[0-9a-fA-F]{2}|u[0-9a-fA-F]{4}|U[0-9a-fA-F]{8})"
				}
			]
		},
		{
			"comment": "Floating-point literals with decimal dot",
			"name": "constant.numeric.hare",
			"match": "\\b[0-9]+\\.[0-9]+([eE][+-]?[0-9]+)?(f32|f64)?\\b"
		},
		{
			"comment": "Floating-point literals with suffix",
			"name": "constant.numeric.hare",
			"match": "\\b[0-9]+([eE][+-]?[0-9]+)?(f32|f64)\\b"
		},
		{
			"comment": "Decimal integer literals",
			"name": "constant.numeric.hare",
			"match": "\\b[0-9]+([eE][+-]?[0-9]+)?(i|u|z|i8|i16|i32|i64|u8|u16|u32|u64)?\\b"
		},
		{
			"comment": "Hexadecimal integer literals",
			"name": "constant.numeric.hare",
			"match": "\\b0x[0-9a-fA-F]+(i|u|z|i8|i16|i32|i64|u8|u16|u32|u64)?\\b"
		},
		{
			"comment": "Octal integer literals",
			"name": "constant.numeric.hare",
			"match": "\\b0o[0-7]+(i|u|z|i8|i16|i32|i64|u8|u16|u32|u64)?\\b"
		},
		{
			"comment": "Binary integer literals",
			"name": "constant.numeric.hare",
			"match": "\\b0b[01]+(i|u|z|i8|i16|i32|i64|u8|u16|u32|u64)?\\b"
		},
		{
			"comment": "Assignment operator",
			"name": "keyword.operator.assignment.hare",
			"match": "(\\+=|-=|/=|\\*=|%=|\\^=|&=|\\|=|<<=|>>=|&&=|\\^\\^=|\\|\\|=)"
		},
		{
			"comment": "Comparison operator",
			"name": "keyword.operator.comparison.hare",
			"match": "(&&|\\^\\^|\\|\\||==|!=)"
		},
		{
			"comment": "Arithmetic operator",
			"name": "keyword.operator.arithmetic.hare",
			"match": "(!|\\+|-|/|\\*|%|\\^|&|\\||<<|>>|~)"
		},
		{
			"comment": "Comparison operator (second group because of regex precedence)",
			"name": "keyword.operator.comparison.hare",
			"match": "(<=|>=|<|>)"
		},
		{
			"comment": "Miscellaneous operator",
			"name": "keyword.operator.misc.hare",
			"match": "(=>|::|:|\\?|!|\\.\\.\\.|\\.\\.)"
		},
		{
			"comment": "Assignment operator (second group because of regex precedence)",
			"name": "keyword.operator.assignment.hare",
			"match": "="
		},
		{
			"comment": "Built-in/core type",
			"name": "support.type.primitive.hare",
			"match": "\\b(str|rune|char|bool|int|uint|uintptr|u8|u16|u32|u64|i8|i16|i32|i64|f32|f64|null|void|nullable|valist)\\b"
		},
		{
			"comment": "Boolean constant",
			"name": "constant.language.boolean.hare",
			"match": "\\b(true|false)\\b"
		}
	],
	"scopeName": "source.hare"
}